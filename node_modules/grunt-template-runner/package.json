{
  "name": "grunt-template-runner",
  "description": "Runs templates and i18n at grunt's compile time.",
  "version": "0.2.1",
  "homepage": "https://github.com/ErikLoubal/grunt-template-runner",
  "author": {
    "name": "Erik Loubal",
    "email": "erik.loubal@gmx.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ErikLoubal/grunt-template-runner.git"
  },
  "bugs": {
    "url": "https://github.com/ErikLoubal/grunt-template-runner/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ErikLoubal/grunt-template-runner/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "underscore": "~1.2.0",
    "i18n": "~0.4.0",
    "node-gettext": "~0.2.10"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "template",
    "i18n",
    "l10n"
  ],
  "readme": "# grunt-template-runner\n\n> Runs i18n and template engine at grunt's compile time.\n\n## Goal\nSimple source file translation tool at grunt's compile time : any source file (no matter its format) may be easily translated using [i18n-node](https://github.com/mashpie/i18n-node) or [node-gettext](https://github.com/andris9/node-gettext).\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-template-runner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-template-runner');\n```\n\n## The \"template_runner\" task\n_Run this task with the `grunt less` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Overview\nIn your project's Gruntfile, add a section named `template_runner` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  template_runner: {\n    basic: {\n      options: {\n        // Task-specific options go here.\n      },\n      files: {\n        // Target-specific file lists go here.\n      },\n    },\n  },\n})\n```\n> #### Destination folder\n> If the destination isn't a file name but a folder name (either a trailing '/' or the name of an existing folder) each input file will result in the generation of a new destination file for each specified language (see folder example below). \n\n### Options\n\n#### data\nType: `JSON`\nDefault value: `{}`\n\nAdditional manual data which may be provided as template source data.\n\n#### directory\nType: `String`\nDefault value: `locales`\n\nSpecifies directory where sources json translation data files will be read. For [i18n-node](https://github.com/mashpie/i18n-node) this directory should contain translation data for each language in a file named _language_.json (eg. en.json). For [node-gettext](https://github.com/andris9/node-gettext) this directory should contain translation data for each language in a file named prefix_language.json with prefix as `gettext` option value and language as language code (eg. default_de.json)\n\n#### extension\nType: `String`\nDefault value: `null`\n\nIf not null, this extension will override file extension for all generated files.\n\n#### gettext\nType: `String`\nDefault value: `null`\n\nDefines gettext prefix files. If null gettext isn't use an default i18n-node is used.\n\n#### gettext_suffix\nType: `String`\nDefault value: `mo`\n\nDefines gettext suffix (extension). May be either `mo` to use binary `.mo` or `po` to use `.po` files.\n\n#### i18n\nType: `Boolean`\nDefault value: `true`\n\nIf true internationalization will be used, otherwise the bare templating rendering is used.\n\n#### locales\nType: `String|Array`\nDefault value: `[]`\n\nDefines the list of all availables locales (ie. languages).\n\n#### variable\nType: `String`\nDefault value: `null`\n\nOptional [Underscore's template variable](http://underscorejs.org/#template) attribute.\n\n\n### Usage Examples\n\n#### Internationalization\nIn this example, an i18n mechanism is used at grunt's compile time using files containing simple gettext like tags.\nIt internally uses [i18n-node](https://github.com/mashpie/i18n-node) to provide translations.\nHere is a sample execution case of the following configuration :\n\n *  if the `src/basic.html` contains some html with included translations : `<div>Title _('Hello')</div>`\n *  and if the `locales` directory contains only a `fr.json` translation file containing :\n`{ \"Hello\": \"Bonjour\" }`\n * then this configuration will generate two destination files containing translated content :\n * basic_en.html containing : `<div>Title Hello</div>`\n * basic_fr.html containing : `<div>Title Bonjour</div>`\n\n```js\ngrunt.initConfig({\n  template_runner: {\n    options: {\n      locales: ['en', 'fr'],\n      directory: 'locales'\n    },\n    files: {\n      'dest/basic.html': ['src/basic.html'],\n    },\n  },\n})\n```\n\n---\n#### Destination folder\nThis is basically the same example as the last one despite the destination file is a folder name.\nAs the destination isn't a single file, each source file will generate a new file in the destination folder. Eg. for configuration below both `basic_en.html` and `another_en.hbs` will be created in the `dest` folder.\n\n```js\ngrunt.initConfig({\n  template_runner: {\n    options: {\n      locales: ['en'],\n      directory: 'locales'\n    },\n    files: {\n      'dest/': ['src/basic.html', 'src/another.hbs'],\n    },\n  },\n})\n```\n\n---\n#### Gettext\nThis example shows how to use gettext's mo translation files. The `gettext` option defines the name of files to load in the translation directory. Defaults behavior uses `.mo` gettext binary files, in this example the `gettext_suffix` option is set in order to use `.po`.\n\n```js\ngrunt.initConfig({\n  template_runner: {\n    options: {\n      locales: ['en', 'fr'],\n      directory: 'locales',\n      gettext: 'default',\n      gettext_suffix: 'po'\n    },\n    files: {\n      'dest/': ['src/basic.html', 'src/another.hbs'],\n    },\n  },\n})\n```\n\n---\n#### Bare template\nIn this example, the bare [Underscore template](http://underscorejs.org/#template) is used, usage of bare templating isn't the most useful part of this plugin but it's still here.\nThe mandatory part in to disable internationalization by using `i18n: false` option.\nIf input file contains an ERB string its contents gets updated using template data provided in the options. Eg.\nIf source contains `Plain text template <%= name %>` the result of the following configuration should be `Plain text template Erik`.\n\n```js\ngrunt.initConfig({\n  template_runner: {\n    options: {\n      i18n: false,\n      data: {name : 'Erik'}\n    },\n    files: {\n      'dest/myDest.txt': ['src/mySource.txt'],\n    },\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.2.1 - Add gettext for both 'mo' and 'po'.\n0.2.0 - Add gettext usage.\n0.1.1 - Add internationalization.\n0.1.0 - Initial version.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-template-runner@0.2.1",
  "_from": "grunt-template-runner@^0.2.1"
}
